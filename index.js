// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular.module('widgets', []).directive('toggle', function() {
    var colors, controller, directive, link, template;
    colors = ['grey', 'green', 'red', 'black', 'blue', 'orange', 'white', 'yellow'];
    template = '<i class=\'ion-ios-lightbulb im-{{color}}\' style=\'font-size: 32px;\'></i>\n&nbsp;&nbsp; {{descr}}\n<label class="toggle">\n  <input type="checkbox"\n    ng-model="status"\n    ng-checked="status"\n    ng-change="change()">\n  <div class="track">\n    <div class="handle"></div>\n  </div>\n</label>';
    link = function(scope) {
      var idx, value, widget;
      widget = scope.ngModel;
      scope.descr = widget.get('descr') || '';
      scope.status = false;
      value = widget.get('value');
      console.log('value', value);
      if (value) {
        scope.status = !!value.status;
      }
      scope.color = 'grey';
      idx = colors.indexOf(widget.get('color'));
      if (scope.status) {
        if (idx !== -1) {
          return scope.color = colors[idx];
        }
      }
    };
    controller = function($scope) {
      var widget;
      widget = $scope.ngModel;
      widget.on('change', function() {
        link($scope);
        return $scope.$apply();
      });
      return $scope.change = function() {
        var status;
        status = $scope.status ? 1 : 0;
        return widget.pub("" + status);
      };
    };
    return directive = {
      restrict: 'E',
      priority: 10,
      scope: {
        ngModel: '='
      },
      template: template,
      controller: controller,
      link: link
    };
  });

  'use strict';

  angular.module('widgets').directive('fillgauge', function() {
    var controller, directive, link, template;
    template = '<div ng-class="\'{{cfg.class2}}\'" style="{{cfg.style2}}">\n  {{cfg.descr}}\n</div>\n<div ng-class="\'{{cfg.class3}}\'" style="{{cfg.style3}}">\n  <svg id="fillgauge{{item.id}}" width="100" height="100"\n    ng-init="FillGaugeUpdate(config.id, config.status)">\n  </svg>\n</div>';
    link = function(scope) {
      var widget;
      widget = scope.ngModel;
      return scope.config = scope.ngModel.data();
    };
    controller = function($scope) {
      var widget;
      widget = $scope.ngModel;
      return widget.on('change', function() {
        link($scope);
        return $scope.$apply();
      });
    };
    return directive = {
      restrict: 'E',
      priority: 10,
      scope: {
        ngModel: '='
      },
      template: template,
      controller: controller,
      link: link
    };
  });

}).call(this);
